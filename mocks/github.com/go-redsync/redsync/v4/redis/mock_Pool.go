// Code generated by mockery v2.40.3. DO NOT EDIT.

package redis

import (
	context "context"

	redis "github.com/go-redsync/redsync/v4/redis"
	mock "github.com/stretchr/testify/mock"
)

// MockPool is an autogenerated mock type for the Pool type
type MockPool struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *MockPool) Get(ctx context.Context) (redis.Conn, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 redis.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (redis.Conn, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) redis.Conn); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(redis.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPool creates a new instance of MockPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPool {
	mock := &MockPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
