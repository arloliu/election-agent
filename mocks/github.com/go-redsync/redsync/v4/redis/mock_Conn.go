// Code generated by mockery v2.40.3. DO NOT EDIT.

package redis

import (
	redis "github.com/go-redsync/redsync/v4/redis"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockConn) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Eval provides a mock function with given fields: script, keysAndArgs
func (_m *MockConn) Eval(script *redis.Script, keysAndArgs ...interface{}) (interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, script)
	_ca = append(_ca, keysAndArgs...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*redis.Script, ...interface{}) (interface{}, error)); ok {
		return rf(script, keysAndArgs...)
	}
	if rf, ok := ret.Get(0).(func(*redis.Script, ...interface{}) interface{}); ok {
		r0 = rf(script, keysAndArgs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*redis.Script, ...interface{}) error); ok {
		r1 = rf(script, keysAndArgs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name
func (_m *MockConn) Get(name string) (string, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PTTL provides a mock function with given fields: name
func (_m *MockConn) PTTL(name string) (time.Duration, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for PTTL")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (time.Duration, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: name, value
func (_m *MockConn) Set(name string, value string) (bool, error) {
	ret := _m.Called(name, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(name, value)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(name, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNX provides a mock function with given fields: name, value, expiry
func (_m *MockConn) SetNX(name string, value string, expiry time.Duration) (bool, error) {
	ret := _m.Called(name, value, expiry)

	if len(ret) == 0 {
		panic("no return value specified for SetNX")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) (bool, error)); ok {
		return rf(name, value, expiry)
	}
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) bool); ok {
		r0 = rf(name, value, expiry)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string, time.Duration) error); ok {
		r1 = rf(name, value, expiry)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
