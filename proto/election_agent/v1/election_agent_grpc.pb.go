// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: election_agent/v1/election_agent.proto

package election_agent_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Election_Campaign_FullMethodName          = "/grpc.election_agent.v1.Election/Campaign"
	Election_ExtendElectedTerm_FullMethodName = "/grpc.election_agent.v1.Election/ExtendElectedTerm"
	Election_Resign_FullMethodName            = "/grpc.election_agent.v1.Election/Resign"
	Election_GetLeader_FullMethodName         = "/grpc.election_agent.v1.Election/GetLeader"
	Election_GetPods_FullMethodName           = "/grpc.election_agent.v1.Election/GetPods"
)

// ElectionClient is the client API for Election service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectionClient interface {
	Campaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResult, error)
	ExtendElectedTerm(ctx context.Context, in *ExtendElectedTermRequest, opts ...grpc.CallOption) (*BoolValue, error)
	Resign(ctx context.Context, in *ResignRequest, opts ...grpc.CallOption) (*BoolValue, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*StringValue, error)
	GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*Pods, error)
}

type electionClient struct {
	cc grpc.ClientConnInterface
}

func NewElectionClient(cc grpc.ClientConnInterface) ElectionClient {
	return &electionClient{cc}
}

func (c *electionClient) Campaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResult, error) {
	out := new(CampaignResult)
	err := c.cc.Invoke(ctx, Election_Campaign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) ExtendElectedTerm(ctx context.Context, in *ExtendElectedTermRequest, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, Election_ExtendElectedTerm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) Resign(ctx context.Context, in *ResignRequest, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, Election_Resign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*StringValue, error) {
	out := new(StringValue)
	err := c.cc.Invoke(ctx, Election_GetLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*Pods, error) {
	out := new(Pods)
	err := c.cc.Invoke(ctx, Election_GetPods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectionServer is the server API for Election service.
// All implementations must embed UnimplementedElectionServer
// for forward compatibility
type ElectionServer interface {
	Campaign(context.Context, *CampaignRequest) (*CampaignResult, error)
	ExtendElectedTerm(context.Context, *ExtendElectedTermRequest) (*BoolValue, error)
	Resign(context.Context, *ResignRequest) (*BoolValue, error)
	GetLeader(context.Context, *GetLeaderRequest) (*StringValue, error)
	GetPods(context.Context, *GetPodsRequest) (*Pods, error)
	mustEmbedUnimplementedElectionServer()
}

// UnimplementedElectionServer must be embedded to have forward compatible implementations.
type UnimplementedElectionServer struct {
}

func (UnimplementedElectionServer) Campaign(context.Context, *CampaignRequest) (*CampaignResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaign not implemented")
}
func (UnimplementedElectionServer) ExtendElectedTerm(context.Context, *ExtendElectedTermRequest) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendElectedTerm not implemented")
}
func (UnimplementedElectionServer) Resign(context.Context, *ResignRequest) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resign not implemented")
}
func (UnimplementedElectionServer) GetLeader(context.Context, *GetLeaderRequest) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedElectionServer) GetPods(context.Context, *GetPodsRequest) (*Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedElectionServer) mustEmbedUnimplementedElectionServer() {}

// UnsafeElectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectionServer will
// result in compilation errors.
type UnsafeElectionServer interface {
	mustEmbedUnimplementedElectionServer()
}

func RegisterElectionServer(s grpc.ServiceRegistrar, srv ElectionServer) {
	s.RegisterService(&Election_ServiceDesc, srv)
}

func _Election_Campaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).Campaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_Campaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).Campaign(ctx, req.(*CampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_ExtendElectedTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendElectedTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).ExtendElectedTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_ExtendElectedTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).ExtendElectedTerm(ctx, req.(*ExtendElectedTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_Resign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).Resign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_Resign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).Resign(ctx, req.(*ResignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_GetPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).GetPods(ctx, req.(*GetPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Election_ServiceDesc is the grpc.ServiceDesc for Election service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Election_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.election_agent.v1.Election",
	HandlerType: (*ElectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Campaign",
			Handler:    _Election_Campaign_Handler,
		},
		{
			MethodName: "ExtendElectedTerm",
			Handler:    _Election_ExtendElectedTerm_Handler,
		},
		{
			MethodName: "Resign",
			Handler:    _Election_Resign_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _Election_GetLeader_Handler,
		},
		{
			MethodName: "GetPods",
			Handler:    _Election_GetPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "election_agent/v1/election_agent.proto",
}
