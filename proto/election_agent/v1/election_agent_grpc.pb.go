// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.2
// source: election_agent/v1/election_agent.proto

package election_agent_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Election_Campaign_FullMethodName          = "/grpc.election_agent.v1.Election/Campaign"
	Election_ExtendElectedTerm_FullMethodName = "/grpc.election_agent.v1.Election/ExtendElectedTerm"
	Election_Resign_FullMethodName            = "/grpc.election_agent.v1.Election/Resign"
	Election_Handover_FullMethodName          = "/grpc.election_agent.v1.Election/Handover"
	Election_GetLeader_FullMethodName         = "/grpc.election_agent.v1.Election/GetLeader"
	Election_ListLeaders_FullMethodName       = "/grpc.election_agent.v1.Election/ListLeaders"
	Election_GetPods_FullMethodName           = "/grpc.election_agent.v1.Election/GetPods"
)

// ElectionClient is the client API for Election service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Election is the service that provides the election methods.
type ElectionClient interface {
	// Campaign is the method that allows a candidate to campaign for the election.
	// It returns the result of the election.
	Campaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResult, error)
	// ExtendElectedTerm is the method that allows the elected leader to extend the elected term.
	// It returns whether the term is extended.
	ExtendElectedTerm(ctx context.Context, in *ExtendElectedTermRequest, opts ...grpc.CallOption) (*BoolValue, error)
	// Resign is the method that allows the leader to resign from the election.
	// It returns whether the leader has resigned.
	Resign(ctx context.Context, in *ResignRequest, opts ...grpc.CallOption) (*BoolValue, error)
	// Handover is the method that allows the leader to handover the leadership to another candidate.
	// It returns whether the handover is successful.
	Handover(ctx context.Context, in *HandoverRequest, opts ...grpc.CallOption) (*BoolValue, error)
	// GetLeader is the method that allows to get the leader of the election.
	// It returns the leader name.
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*StringValue, error)
	// ListLeaders is the method that allows to list the leaders of the election.
	// It returns the list of leaders.
	ListLeaders(ctx context.Context, in *ListLeadersRequest, opts ...grpc.CallOption) (*Leaders, error)
	// GetPods is the method that allows to get the pods information.
	// It returns the list of pods.
	GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*Pods, error)
}

type electionClient struct {
	cc grpc.ClientConnInterface
}

func NewElectionClient(cc grpc.ClientConnInterface) ElectionClient {
	return &electionClient{cc}
}

func (c *electionClient) Campaign(ctx context.Context, in *CampaignRequest, opts ...grpc.CallOption) (*CampaignResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignResult)
	err := c.cc.Invoke(ctx, Election_Campaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) ExtendElectedTerm(ctx context.Context, in *ExtendElectedTermRequest, opts ...grpc.CallOption) (*BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, Election_ExtendElectedTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) Resign(ctx context.Context, in *ResignRequest, opts ...grpc.CallOption) (*BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, Election_Resign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) Handover(ctx context.Context, in *HandoverRequest, opts ...grpc.CallOption) (*BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, Election_Handover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*StringValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringValue)
	err := c.cc.Invoke(ctx, Election_GetLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) ListLeaders(ctx context.Context, in *ListLeadersRequest, opts ...grpc.CallOption) (*Leaders, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Leaders)
	err := c.cc.Invoke(ctx, Election_ListLeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *electionClient) GetPods(ctx context.Context, in *GetPodsRequest, opts ...grpc.CallOption) (*Pods, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pods)
	err := c.cc.Invoke(ctx, Election_GetPods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectionServer is the server API for Election service.
// All implementations must embed UnimplementedElectionServer
// for forward compatibility.
//
// Election is the service that provides the election methods.
type ElectionServer interface {
	// Campaign is the method that allows a candidate to campaign for the election.
	// It returns the result of the election.
	Campaign(context.Context, *CampaignRequest) (*CampaignResult, error)
	// ExtendElectedTerm is the method that allows the elected leader to extend the elected term.
	// It returns whether the term is extended.
	ExtendElectedTerm(context.Context, *ExtendElectedTermRequest) (*BoolValue, error)
	// Resign is the method that allows the leader to resign from the election.
	// It returns whether the leader has resigned.
	Resign(context.Context, *ResignRequest) (*BoolValue, error)
	// Handover is the method that allows the leader to handover the leadership to another candidate.
	// It returns whether the handover is successful.
	Handover(context.Context, *HandoverRequest) (*BoolValue, error)
	// GetLeader is the method that allows to get the leader of the election.
	// It returns the leader name.
	GetLeader(context.Context, *GetLeaderRequest) (*StringValue, error)
	// ListLeaders is the method that allows to list the leaders of the election.
	// It returns the list of leaders.
	ListLeaders(context.Context, *ListLeadersRequest) (*Leaders, error)
	// GetPods is the method that allows to get the pods information.
	// It returns the list of pods.
	GetPods(context.Context, *GetPodsRequest) (*Pods, error)
	mustEmbedUnimplementedElectionServer()
}

// UnimplementedElectionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElectionServer struct{}

func (UnimplementedElectionServer) Campaign(context.Context, *CampaignRequest) (*CampaignResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Campaign not implemented")
}
func (UnimplementedElectionServer) ExtendElectedTerm(context.Context, *ExtendElectedTermRequest) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendElectedTerm not implemented")
}
func (UnimplementedElectionServer) Resign(context.Context, *ResignRequest) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resign not implemented")
}
func (UnimplementedElectionServer) Handover(context.Context, *HandoverRequest) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handover not implemented")
}
func (UnimplementedElectionServer) GetLeader(context.Context, *GetLeaderRequest) (*StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedElectionServer) ListLeaders(context.Context, *ListLeadersRequest) (*Leaders, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeaders not implemented")
}
func (UnimplementedElectionServer) GetPods(context.Context, *GetPodsRequest) (*Pods, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPods not implemented")
}
func (UnimplementedElectionServer) mustEmbedUnimplementedElectionServer() {}
func (UnimplementedElectionServer) testEmbeddedByValue()                  {}

// UnsafeElectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectionServer will
// result in compilation errors.
type UnsafeElectionServer interface {
	mustEmbedUnimplementedElectionServer()
}

func RegisterElectionServer(s grpc.ServiceRegistrar, srv ElectionServer) {
	// If the following call pancis, it indicates UnimplementedElectionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Election_ServiceDesc, srv)
}

func _Election_Campaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).Campaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_Campaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).Campaign(ctx, req.(*CampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_ExtendElectedTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendElectedTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).ExtendElectedTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_ExtendElectedTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).ExtendElectedTerm(ctx, req.(*ExtendElectedTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_Resign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).Resign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_Resign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).Resign(ctx, req.(*ResignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_Handover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).Handover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_Handover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).Handover(ctx, req.(*HandoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_ListLeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeadersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).ListLeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_ListLeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).ListLeaders(ctx, req.(*ListLeadersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Election_GetPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionServer).GetPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Election_GetPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionServer).GetPods(ctx, req.(*GetPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Election_ServiceDesc is the grpc.ServiceDesc for Election service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Election_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.election_agent.v1.Election",
	HandlerType: (*ElectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Campaign",
			Handler:    _Election_Campaign_Handler,
		},
		{
			MethodName: "ExtendElectedTerm",
			Handler:    _Election_ExtendElectedTerm_Handler,
		},
		{
			MethodName: "Resign",
			Handler:    _Election_Resign_Handler,
		},
		{
			MethodName: "Handover",
			Handler:    _Election_Handover_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _Election_GetLeader_Handler,
		},
		{
			MethodName: "ListLeaders",
			Handler:    _Election_ListLeaders_Handler,
		},
		{
			MethodName: "GetPods",
			Handler:    _Election_GetPods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "election_agent/v1/election_agent.proto",
}

const (
	Control_GetStatus_FullMethodName = "/grpc.election_agent.v1.Control/GetStatus"
	Control_SetStatus_FullMethodName = "/grpc.election_agent.v1.Control/SetStatus"
)

// ControlClient is the client API for Control service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Control is the service that provides the control methods.
type ControlClient interface {
	// GetStatus is the method that allows to get the status of the agent.
	// It returns the status of the agent.
	GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AgentStatus, error)
	// SetStatus is the method that allows to set the status of the agent.
	// It returns whether the status is set.
	SetStatus(ctx context.Context, in *AgentStatus, opts ...grpc.CallOption) (*BoolValue, error)
}

type controlClient struct {
	cc grpc.ClientConnInterface
}

func NewControlClient(cc grpc.ClientConnInterface) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) GetStatus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AgentStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentStatus)
	err := c.cc.Invoke(ctx, Control_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) SetStatus(ctx context.Context, in *AgentStatus, opts ...grpc.CallOption) (*BoolValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, Control_SetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlServer is the server API for Control service.
// All implementations must embed UnimplementedControlServer
// for forward compatibility.
//
// Control is the service that provides the control methods.
type ControlServer interface {
	// GetStatus is the method that allows to get the status of the agent.
	// It returns the status of the agent.
	GetStatus(context.Context, *Empty) (*AgentStatus, error)
	// SetStatus is the method that allows to set the status of the agent.
	// It returns whether the status is set.
	SetStatus(context.Context, *AgentStatus) (*BoolValue, error)
	mustEmbedUnimplementedControlServer()
}

// UnimplementedControlServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedControlServer struct{}

func (UnimplementedControlServer) GetStatus(context.Context, *Empty) (*AgentStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedControlServer) SetStatus(context.Context, *AgentStatus) (*BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedControlServer) mustEmbedUnimplementedControlServer() {}
func (UnimplementedControlServer) testEmbeddedByValue()                 {}

// UnsafeControlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlServer will
// result in compilation errors.
type UnsafeControlServer interface {
	mustEmbedUnimplementedControlServer()
}

func RegisterControlServer(s grpc.ServiceRegistrar, srv ControlServer) {
	// If the following call pancis, it indicates UnimplementedControlServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Control_ServiceDesc, srv)
}

func _Control_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).GetStatus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Control_SetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).SetStatus(ctx, req.(*AgentStatus))
	}
	return interceptor(ctx, in, info, handler)
}

// Control_ServiceDesc is the grpc.ServiceDesc for Control service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Control_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.election_agent.v1.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _Control_GetStatus_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _Control_SetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "election_agent/v1/election_agent.proto",
}
