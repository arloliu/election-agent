// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v4.24.2
// source: election_agent/v1/election_agent.proto

package election_agent_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Empty is an empty message.
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{0}
}

// BoolValue is a message that contains a boolean value.
type BoolValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         bool                   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolValue) Reset() {
	*x = BoolValue{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValue) ProtoMessage() {}

func (x *BoolValue) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValue.ProtoReflect.Descriptor instead.
func (*BoolValue) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{1}
}

func (x *BoolValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// StringValue is a message that contains a string value.
type StringValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringValue) Reset() {
	*x = StringValue{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringValue) ProtoMessage() {}

func (x *StringValue) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringValue.ProtoReflect.Descriptor instead.
func (*StringValue) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{2}
}

func (x *StringValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Pods is a message that contains a list of Pod.
type Pods struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*Pod                 `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pods) Reset() {
	*x = Pods{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pods) ProtoMessage() {}

func (x *Pods) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pods.ProtoReflect.Descriptor instead.
func (*Pods) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{3}
}

func (x *Pods) GetItems() []*Pod {
	if x != nil {
		return x.Items
	}
	return nil
}

// Pod is a message that contains the information of a pod.
type Pod struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the name of the pod.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the deployment name of the pod.
	Deployment string `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// the ip address of the pod.
	Ip string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	// the status of the pod.
	Status *PodStatus `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	// the replica set information of the pod.
	ReplicaSet    *ReplicaSet `protobuf:"bytes,5,opt,name=replicaSet,proto3" json:"replicaSet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pod) Reset() {
	*x = Pod{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{4}
}

func (x *Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pod) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *Pod) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Pod) GetStatus() *PodStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Pod) GetReplicaSet() *ReplicaSet {
	if x != nil {
		return x.ReplicaSet
	}
	return nil
}

// PodStatus is a message that contains the status of a pod.
type PodStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the current phase of the pod.
	// e.g. Running, Pending, Succeeded, Failed, Unknown.
	Phase string `protobuf:"bytes,1,opt,name=phase,proto3" json:"phase,omitempty"`
	// the reason of the phase.
	// e.g. NodeLost, PodInitializing, ContainerCreating, CrashLoopBackOff, etc.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	// whether the pod is terminating.
	Terminating bool `protobuf:"varint,3,opt,name=terminating,proto3" json:"terminating,omitempty"`
	// whether the pod is scheduled.
	PodScheduled bool `protobuf:"varint,4,opt,name=podScheduled,proto3" json:"podScheduled,omitempty"`
	// whether the pod is initialized.
	PodInitialized bool `protobuf:"varint,5,opt,name=podInitialized,proto3" json:"podInitialized,omitempty"`
	// whether the pod is ready.
	PodReady bool `protobuf:"varint,6,opt,name=podReady,proto3" json:"podReady,omitempty"`
	// whether the containers are ready.
	ContainersReady bool `protobuf:"varint,7,opt,name=containersReady,proto3" json:"containersReady,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PodStatus) Reset() {
	*x = PodStatus{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatus) ProtoMessage() {}

func (x *PodStatus) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatus.ProtoReflect.Descriptor instead.
func (*PodStatus) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{5}
}

func (x *PodStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PodStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PodStatus) GetTerminating() bool {
	if x != nil {
		return x.Terminating
	}
	return false
}

func (x *PodStatus) GetPodScheduled() bool {
	if x != nil {
		return x.PodScheduled
	}
	return false
}

func (x *PodStatus) GetPodInitialized() bool {
	if x != nil {
		return x.PodInitialized
	}
	return false
}

func (x *PodStatus) GetPodReady() bool {
	if x != nil {
		return x.PodReady
	}
	return false
}

func (x *PodStatus) GetContainersReady() bool {
	if x != nil {
		return x.ContainersReady
	}
	return false
}

// ReplicaSet is a message that contains the information of a replica set.
type ReplicaSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the name of the replica set.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// the revision of the replica set. it's useful to determine the newer version of the replica set.
	Revision int32 `protobuf:"varint,2,opt,name=revision,proto3" json:"revision,omitempty"`
	// the number of available replicas.
	AvailableReplicas int32 `protobuf:"varint,3,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	// the number of fully labeled replicas.
	FullyLabeledReplicas int32 `protobuf:"varint,4,opt,name=fullyLabeledReplicas,proto3" json:"fullyLabeledReplicas,omitempty"`
	// the number of ready replicas.
	ReadyReplicas int32 `protobuf:"varint,5,opt,name=readyReplicas,proto3" json:"readyReplicas,omitempty"`
	// the number of replicas.
	Replicas int32 `protobuf:"varint,6,opt,name=replicas,proto3" json:"replicas,omitempty"`
	// the number of desired replicas.
	DesiredReplicas int32 `protobuf:"varint,7,opt,name=desiredReplicas,proto3" json:"desiredReplicas,omitempty"`
	// the maximum number of replicas.
	MaxReplicas   int32 `protobuf:"varint,8,opt,name=maxReplicas,proto3" json:"maxReplicas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicaSet) Reset() {
	*x = ReplicaSet{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicaSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaSet) ProtoMessage() {}

func (x *ReplicaSet) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaSet.ProtoReflect.Descriptor instead.
func (*ReplicaSet) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{6}
}

func (x *ReplicaSet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicaSet) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *ReplicaSet) GetAvailableReplicas() int32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *ReplicaSet) GetFullyLabeledReplicas() int32 {
	if x != nil {
		return x.FullyLabeledReplicas
	}
	return 0
}

func (x *ReplicaSet) GetReadyReplicas() int32 {
	if x != nil {
		return x.ReadyReplicas
	}
	return 0
}

func (x *ReplicaSet) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *ReplicaSet) GetDesiredReplicas() int32 {
	if x != nil {
		return x.DesiredReplicas
	}
	return 0
}

func (x *ReplicaSet) GetMaxReplicas() int32 {
	if x != nil {
		return x.MaxReplicas
	}
	return 0
}

// CampaignRequest is the request message for the Campaign method.
type CampaignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the election name.
	Election string `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
	// the candidate name.
	Candidate string `protobuf:"bytes,2,opt,name=candidate,proto3" json:"candidate,omitempty"`
	// the number of milliseconds for this election term.
	Term int32 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	// the kind of election, useful for group elections. defaults to "default".
	Kind          string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CampaignRequest) Reset() {
	*x = CampaignRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignRequest) ProtoMessage() {}

func (x *CampaignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignRequest.ProtoReflect.Descriptor instead.
func (*CampaignRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{7}
}

func (x *CampaignRequest) GetElection() string {
	if x != nil {
		return x.Election
	}
	return ""
}

func (x *CampaignRequest) GetCandidate() string {
	if x != nil {
		return x.Candidate
	}
	return ""
}

func (x *CampaignRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *CampaignRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// CampaignResult is the response message for the Campaign method.
type CampaignResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// whether the candidate is elected
	Elected bool `protobuf:"varint,1,opt,name=elected,proto3" json:"elected,omitempty"`
	// the leader name.
	Leader string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// the kind of election, useful for group elections. defaults to "default".
	Kind          string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CampaignResult) Reset() {
	*x = CampaignResult{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CampaignResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CampaignResult) ProtoMessage() {}

func (x *CampaignResult) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CampaignResult.ProtoReflect.Descriptor instead.
func (*CampaignResult) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{8}
}

func (x *CampaignResult) GetElected() bool {
	if x != nil {
		return x.Elected
	}
	return false
}

func (x *CampaignResult) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *CampaignResult) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// ExtendElectedTermRequest is the request message for the ExtendElectedTerm method.
type ExtendElectedTermRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the election name.
	Election string `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
	// the leader name.
	Leader string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// the number of milliseconds for this election term.
	Term int32 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	// the kind of election, useful for group elections. defaults to "default".
	Kind string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	// the number of retries, betwwen 0 ~ 10.
	Retries int32 `protobuf:"varint,5,opt,name=retries,proto3" json:"retries,omitempty"`
	// the number of milliseconds between retries, between 0 ~ 1000ms.
	RetryInterval int32 `protobuf:"varint,6,opt,name=retry_interval,json=retryInterval,proto3" json:"retry_interval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtendElectedTermRequest) Reset() {
	*x = ExtendElectedTermRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtendElectedTermRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendElectedTermRequest) ProtoMessage() {}

func (x *ExtendElectedTermRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendElectedTermRequest.ProtoReflect.Descriptor instead.
func (*ExtendElectedTermRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{9}
}

func (x *ExtendElectedTermRequest) GetElection() string {
	if x != nil {
		return x.Election
	}
	return ""
}

func (x *ExtendElectedTermRequest) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *ExtendElectedTermRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *ExtendElectedTermRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ExtendElectedTermRequest) GetRetries() int32 {
	if x != nil {
		return x.Retries
	}
	return 0
}

func (x *ExtendElectedTermRequest) GetRetryInterval() int32 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

// ResignRequest is the request message for the Resign method.
type ResignRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the election name.
	Election string `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
	// the leader name.
	Leader string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// the kind of election, useful for group elections. defaults to "default".
	Kind          string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResignRequest) Reset() {
	*x = ResignRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResignRequest) ProtoMessage() {}

func (x *ResignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResignRequest.ProtoReflect.Descriptor instead.
func (*ResignRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{10}
}

func (x *ResignRequest) GetElection() string {
	if x != nil {
		return x.Election
	}
	return ""
}

func (x *ResignRequest) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *ResignRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// HandoverRequest is the request message for the Handover method.
type HandoverRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the election name.
	Election string `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
	// the new leader name.
	Leader string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	// the number of milliseconds for this election term.
	Term int32 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`
	// the kind of election, useful for group elections. defaults to "default".
	Kind          string `protobuf:"bytes,4,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HandoverRequest) Reset() {
	*x = HandoverRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HandoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandoverRequest) ProtoMessage() {}

func (x *HandoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandoverRequest.ProtoReflect.Descriptor instead.
func (*HandoverRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{11}
}

func (x *HandoverRequest) GetElection() string {
	if x != nil {
		return x.Election
	}
	return ""
}

func (x *HandoverRequest) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *HandoverRequest) GetTerm() int32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *HandoverRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// GetLeaderRequest is the request message for the GetLeader method.
type GetLeaderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the election name.
	Election string `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
	// the kind of election, useful for group elections. defaults to "default".
	Kind          string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLeaderRequest) Reset() {
	*x = GetLeaderRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLeaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderRequest) ProtoMessage() {}

func (x *GetLeaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderRequest.ProtoReflect.Descriptor instead.
func (*GetLeaderRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{12}
}

func (x *GetLeaderRequest) GetElection() string {
	if x != nil {
		return x.Election
	}
	return ""
}

func (x *GetLeaderRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// GetPodsRequest is the request message for the GetPods method.
// It contains the namespace, deployment and pod_name of the pods being queried.
//   - If the deployment is provided, the deployment will be used to query the pods.
//   - If the pod_name is provided, the pod_name will be used to query the pods.
//   - If both deployment and pod_name are provided, the pod_name will be used.
type GetPodsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the namespace of the pods being queried.
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// the deployment of the pods being queried, it can be empty if pod_name is provided.
	// if both deployment and pod_name are provided, the pod_name will be used.
	Deployment string `protobuf:"bytes,2,opt,name=deployment,proto3" json:"deployment,omitempty"`
	// the pod name being queried, it can be empty if deployment is provided.
	// if both deployment and pod_name are provided, the pod_name will be used.
	PodName       string `protobuf:"bytes,3,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPodsRequest) Reset() {
	*x = GetPodsRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodsRequest) ProtoMessage() {}

func (x *GetPodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodsRequest.ProtoReflect.Descriptor instead.
func (*GetPodsRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{13}
}

func (x *GetPodsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetPodsRequest) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *GetPodsRequest) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

// ListLeadersRequest is the request message for the ListLeaders method.
type ListLeadersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the kind of election to list the leaders.
	Kind          string `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListLeadersRequest) Reset() {
	*x = ListLeadersRequest{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLeadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeadersRequest) ProtoMessage() {}

func (x *ListLeadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeadersRequest.ProtoReflect.Descriptor instead.
func (*ListLeadersRequest) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{14}
}

func (x *ListLeadersRequest) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

// Leader is a message that contains the information of a leader.
type Leader struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the election name.
	Election string `protobuf:"bytes,1,opt,name=election,proto3" json:"election,omitempty"`
	// the leader name.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Leader) Reset() {
	*x = Leader{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Leader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leader) ProtoMessage() {}

func (x *Leader) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leader.ProtoReflect.Descriptor instead.
func (*Leader) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{15}
}

func (x *Leader) GetElection() string {
	if x != nil {
		return x.Election
	}
	return ""
}

func (x *Leader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Leaders is a message that contains a list of Leader.
type Leaders struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Leaders       []*Leader              `protobuf:"bytes,1,rep,name=leaders,proto3" json:"leaders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Leaders) Reset() {
	*x = Leaders{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Leaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaders) ProtoMessage() {}

func (x *Leaders) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaders.ProtoReflect.Descriptor instead.
func (*Leaders) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{16}
}

func (x *Leaders) GetLeaders() []*Leader {
	if x != nil {
		return x.Leaders
	}
	return nil
}

// AgentStatus is a message that contains the status of the agent.
type AgentStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// the state of the agent.
	// the possible values are: "active", "standby", "unavailable", "empty".
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// the mode of the agent.
	// the possible values are: "normal", "orphan", "unknown".
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// the active zone of the agent.
	ActiveZone string `protobuf:"bytes,3,opt,name=active_zone,json=activeZone,proto3" json:"active_zone,omitempty"`
	// whether the agent is connected to the zone coordinator.
	ZcConnected bool `protobuf:"varint,4,opt,name=zc_connected,json=zcConnected,proto3" json:"zc_connected,omitempty"`
	// whether the agent is connected to the peer.
	PeerConnected bool `protobuf:"varint,5,opt,name=peer_connected,json=peerConnected,proto3" json:"peer_connected,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentStatus) Reset() {
	*x = AgentStatus{}
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentStatus) ProtoMessage() {}

func (x *AgentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_election_agent_v1_election_agent_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentStatus.ProtoReflect.Descriptor instead.
func (*AgentStatus) Descriptor() ([]byte, []int) {
	return file_election_agent_v1_election_agent_proto_rawDescGZIP(), []int{17}
}

func (x *AgentStatus) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *AgentStatus) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *AgentStatus) GetActiveZone() string {
	if x != nil {
		return x.ActiveZone
	}
	return ""
}

func (x *AgentStatus) GetZcConnected() bool {
	if x != nil {
		return x.ZcConnected
	}
	return false
}

func (x *AgentStatus) GetPeerConnected() bool {
	if x != nil {
		return x.PeerConnected
	}
	return false
}

var File_election_agent_v1_election_agent_proto protoreflect.FileDescriptor

var file_election_agent_v1_election_agent_proto_rawDesc = []byte{
	0x0a, 0x26, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x39, 0x0a, 0x04, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xc8, 0x01, 0x0a,
	0x03, 0x50, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x22, 0xed, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x6f, 0x64, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x70, 0x6f, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x64,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x70, 0x6f, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x6f, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0xac, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0x73, 0x0a, 0x0f, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x56, 0x0a, 0x0e, 0x43,
	0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x57, 0x0a,
	0x0d, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x6d, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x65, 0x72,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x42, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x38,
	0x0a, 0x06, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa2, 0x01,
	0x0a, 0x0b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x7a, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x7a, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x32, 0x86, 0x05, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5b, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x12, 0x27, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x68, 0x0a, 0x11,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x30, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x25, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56, 0x0a, 0x08, 0x48, 0x61,
	0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x27, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x28, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x73, 0x32, 0xaf, 0x01, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x21, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x27, 0x5a,
	0x25, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_election_agent_v1_election_agent_proto_rawDescOnce sync.Once
	file_election_agent_v1_election_agent_proto_rawDescData = file_election_agent_v1_election_agent_proto_rawDesc
)

func file_election_agent_v1_election_agent_proto_rawDescGZIP() []byte {
	file_election_agent_v1_election_agent_proto_rawDescOnce.Do(func() {
		file_election_agent_v1_election_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_election_agent_v1_election_agent_proto_rawDescData)
	})
	return file_election_agent_v1_election_agent_proto_rawDescData
}

var file_election_agent_v1_election_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_election_agent_v1_election_agent_proto_goTypes = []any{
	(*Empty)(nil),                    // 0: grpc.election_agent.v1.Empty
	(*BoolValue)(nil),                // 1: grpc.election_agent.v1.BoolValue
	(*StringValue)(nil),              // 2: grpc.election_agent.v1.StringValue
	(*Pods)(nil),                     // 3: grpc.election_agent.v1.Pods
	(*Pod)(nil),                      // 4: grpc.election_agent.v1.Pod
	(*PodStatus)(nil),                // 5: grpc.election_agent.v1.PodStatus
	(*ReplicaSet)(nil),               // 6: grpc.election_agent.v1.ReplicaSet
	(*CampaignRequest)(nil),          // 7: grpc.election_agent.v1.CampaignRequest
	(*CampaignResult)(nil),           // 8: grpc.election_agent.v1.CampaignResult
	(*ExtendElectedTermRequest)(nil), // 9: grpc.election_agent.v1.ExtendElectedTermRequest
	(*ResignRequest)(nil),            // 10: grpc.election_agent.v1.ResignRequest
	(*HandoverRequest)(nil),          // 11: grpc.election_agent.v1.HandoverRequest
	(*GetLeaderRequest)(nil),         // 12: grpc.election_agent.v1.GetLeaderRequest
	(*GetPodsRequest)(nil),           // 13: grpc.election_agent.v1.GetPodsRequest
	(*ListLeadersRequest)(nil),       // 14: grpc.election_agent.v1.ListLeadersRequest
	(*Leader)(nil),                   // 15: grpc.election_agent.v1.Leader
	(*Leaders)(nil),                  // 16: grpc.election_agent.v1.Leaders
	(*AgentStatus)(nil),              // 17: grpc.election_agent.v1.AgentStatus
}
var file_election_agent_v1_election_agent_proto_depIdxs = []int32{
	4,  // 0: grpc.election_agent.v1.Pods.items:type_name -> grpc.election_agent.v1.Pod
	5,  // 1: grpc.election_agent.v1.Pod.status:type_name -> grpc.election_agent.v1.PodStatus
	6,  // 2: grpc.election_agent.v1.Pod.replicaSet:type_name -> grpc.election_agent.v1.ReplicaSet
	15, // 3: grpc.election_agent.v1.Leaders.leaders:type_name -> grpc.election_agent.v1.Leader
	7,  // 4: grpc.election_agent.v1.Election.Campaign:input_type -> grpc.election_agent.v1.CampaignRequest
	9,  // 5: grpc.election_agent.v1.Election.ExtendElectedTerm:input_type -> grpc.election_agent.v1.ExtendElectedTermRequest
	10, // 6: grpc.election_agent.v1.Election.Resign:input_type -> grpc.election_agent.v1.ResignRequest
	11, // 7: grpc.election_agent.v1.Election.Handover:input_type -> grpc.election_agent.v1.HandoverRequest
	12, // 8: grpc.election_agent.v1.Election.GetLeader:input_type -> grpc.election_agent.v1.GetLeaderRequest
	14, // 9: grpc.election_agent.v1.Election.ListLeaders:input_type -> grpc.election_agent.v1.ListLeadersRequest
	13, // 10: grpc.election_agent.v1.Election.GetPods:input_type -> grpc.election_agent.v1.GetPodsRequest
	0,  // 11: grpc.election_agent.v1.Control.GetStatus:input_type -> grpc.election_agent.v1.Empty
	17, // 12: grpc.election_agent.v1.Control.SetStatus:input_type -> grpc.election_agent.v1.AgentStatus
	8,  // 13: grpc.election_agent.v1.Election.Campaign:output_type -> grpc.election_agent.v1.CampaignResult
	1,  // 14: grpc.election_agent.v1.Election.ExtendElectedTerm:output_type -> grpc.election_agent.v1.BoolValue
	1,  // 15: grpc.election_agent.v1.Election.Resign:output_type -> grpc.election_agent.v1.BoolValue
	1,  // 16: grpc.election_agent.v1.Election.Handover:output_type -> grpc.election_agent.v1.BoolValue
	2,  // 17: grpc.election_agent.v1.Election.GetLeader:output_type -> grpc.election_agent.v1.StringValue
	16, // 18: grpc.election_agent.v1.Election.ListLeaders:output_type -> grpc.election_agent.v1.Leaders
	3,  // 19: grpc.election_agent.v1.Election.GetPods:output_type -> grpc.election_agent.v1.Pods
	17, // 20: grpc.election_agent.v1.Control.GetStatus:output_type -> grpc.election_agent.v1.AgentStatus
	1,  // 21: grpc.election_agent.v1.Control.SetStatus:output_type -> grpc.election_agent.v1.BoolValue
	13, // [13:22] is the sub-list for method output_type
	4,  // [4:13] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_election_agent_v1_election_agent_proto_init() }
func file_election_agent_v1_election_agent_proto_init() {
	if File_election_agent_v1_election_agent_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_election_agent_v1_election_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_election_agent_v1_election_agent_proto_goTypes,
		DependencyIndexes: file_election_agent_v1_election_agent_proto_depIdxs,
		MessageInfos:      file_election_agent_v1_election_agent_proto_msgTypes,
	}.Build()
	File_election_agent_v1_election_agent_proto = out.File
	file_election_agent_v1_election_agent_proto_rawDesc = nil
	file_election_agent_v1_election_agent_proto_goTypes = nil
	file_election_agent_v1_election_agent_proto_depIdxs = nil
}
