// Code generated by mockery v2.40.3. DO NOT EDIT.

package redlock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockConn is an autogenerated mock type for the Conn type
type MockConn struct {
	mock.Mock
}

// Close provides a mock function with given fields: ctx
func (_m *MockConn) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Eval provides a mock function with given fields: ctx, script, keys, args
func (_m *MockConn) Eval(ctx context.Context, script *Script, keys []string, args []string) (interface{}, error) {
	ret := _m.Called(ctx, script, keys, args)

	if len(ret) == 0 {
		panic("no return value specified for Eval")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Script, []string, []string) (interface{}, error)); ok {
		return rf(ctx, script, keys, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Script, []string, []string) interface{}); ok {
		r0 = rf(ctx, script, keys, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Script, []string, []string) error); ok {
		r1 = rf(ctx, script, keys, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, name
func (_m *MockConn) Get(ctx context.Context, name string) (string, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MGet provides a mock function with given fields: ctx, keys
func (_m *MockConn) MGet(ctx context.Context, keys ...string) ([]string, error) {
	ret := _m.Called(ctx, keys)

	if len(ret) == 0 {
		panic("no return value specified for MGet")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...string) ([]string, error)); ok {
		return rf(ctx, keys...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...string) []string); ok {
		r0 = rf(ctx, keys...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...string) error); ok {
		r1 = rf(ctx, keys...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MSet provides a mock function with given fields: ctx, pairs
func (_m *MockConn) MSet(ctx context.Context, pairs ...interface{}) (bool, error) {
	ret := _m.Called(ctx, pairs)

	if len(ret) == 0 {
		panic("no return value specified for MSet")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) (bool, error)); ok {
		return rf(ctx, pairs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) bool); ok {
		r0 = rf(ctx, pairs...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...interface{}) error); ok {
		r1 = rf(ctx, pairs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotAcceptLock provides a mock function with given fields:
func (_m *MockConn) NotAcceptLock() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NotAcceptLock")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx
func (_m *MockConn) Ping(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Scan provides a mock function with given fields: ctx, cursor, match, count
func (_m *MockConn) Scan(ctx context.Context, cursor uint64, match string, count int64) ([]string, uint64, error) {
	ret := _m.Called(ctx, cursor, match, count)

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 []string
	var r1 uint64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64) ([]string, uint64, error)); ok {
		return rf(ctx, cursor, match, count)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string, int64) []string); ok {
		r0 = rf(ctx, cursor, match, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, string, int64) uint64); ok {
		r1 = rf(ctx, cursor, match, count)
	} else {
		r1 = ret.Get(1).(uint64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64, string, int64) error); ok {
		r2 = rf(ctx, cursor, match, count)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Set provides a mock function with given fields: ctx, name, value
func (_m *MockConn) Set(ctx context.Context, name string, value string) (bool, error) {
	ret := _m.Called(ctx, name, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, name, value)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, name, value)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockConn creates a new instance of MockConn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConn {
	mock := &MockConn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
