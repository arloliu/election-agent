// Code generated by mockery v2.26.1. DO NOT EDIT.

package zone

import (
	context "context"
	agent "election-agent/internal/agent"

	election_agent_v1 "election-agent/proto/election_agent/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockZoneManager is an autogenerated mock type for the ZoneManager type
type MockZoneManager struct {
	mock.Mock
}

// GetActiveZone provides a mock function with given fields:
func (_m *MockZoneManager) GetActiveZone() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentStatus provides a mock function with given fields:
func (_m *MockZoneManager) GetAgentStatus() (*agent.Status, error) {
	ret := _m.Called()

	var r0 *agent.Status
	var r1 error
	if rf, ok := ret.Get(0).(func() (*agent.Status, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *agent.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*agent.Status)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPeerStatus provides a mock function with given fields:
func (_m *MockZoneManager) GetPeerStatus() ([]*election_agent_v1.AgentStatus, error) {
	ret := _m.Called()

	var r0 []*election_agent_v1.AgentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*election_agent_v1.AgentStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*election_agent_v1.AgentStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*election_agent_v1.AgentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAgentStatus provides a mock function with given fields: status
func (_m *MockZoneManager) SetAgentStatus(status *agent.Status) error {
	ret := _m.Called(status)

	var r0 error
	if rf, ok := ret.Get(0).(func(*agent.Status) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOperationMode provides a mock function with given fields: mode
func (_m *MockZoneManager) SetOperationMode(mode string) {
	_m.Called(mode)
}

// SetPeerStatus provides a mock function with given fields: status
func (_m *MockZoneManager) SetPeerStatus(status *election_agent_v1.AgentStatus) error {
	ret := _m.Called(status)

	var r0 error
	if rf, ok := ret.Get(0).(func(*election_agent_v1.AgentStatus) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockZoneManager) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockZoneManager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockZoneManager interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockZoneManager creates a new instance of MockZoneManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockZoneManager(t mockConstructorTestingTNewMockZoneManager) *MockZoneManager {
	mock := &MockZoneManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
