// Code generated by mockery v2.40.3. DO NOT EDIT.

package zone

import (
	context "context"
	agent "election-agent/internal/agent"

	election_agent_v1 "election-agent/proto/election_agent/v1"

	mock "github.com/stretchr/testify/mock"
)

// MockZoneManager is an autogenerated mock type for the ZoneManager type
type MockZoneManager struct {
	mock.Mock
}

// SetAgentStatus provides a mock function with given fields: status
func (_m *MockZoneManager) SetAgentStatus(status *agent.Status) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for SetAgentStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*agent.Status) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOperationMode provides a mock function with given fields: mode
func (_m *MockZoneManager) SetOperationMode(mode string) {
	_m.Called(mode)
}

// SetPeerStatus provides a mock function with given fields: status
func (_m *MockZoneManager) SetPeerStatus(status *election_agent_v1.AgentStatus) error {
	ret := _m.Called(status)

	if len(ret) == 0 {
		panic("no return value specified for SetPeerStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*election_agent_v1.AgentStatus) error); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Shutdown provides a mock function with given fields: ctx
func (_m *MockZoneManager) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *MockZoneManager) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockZoneManager creates a new instance of MockZoneManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockZoneManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockZoneManager {
	mock := &MockZoneManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
